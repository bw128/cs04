// Copyright 2021, University of Colorado Boulder
// @author Matt Pennington (PhET Interactive Simulations)

const axios = require('axios');
const getFullStringMap = require('./getFullStringMap');
const loadJSON = require('../common/loadJSON');
const gitCheckout = require('../common/gitCheckout');

/**
 * NOTE: release branch NEEDS to be checked out for this to be called, since we'll need the dependencies.json file
 *
 * @param {string} simName
 * @param {string[]} locales - a list of locale codes
 * @param {string} checkoutDir
 * @returns {Promise.<{}>}
 */
const parseScreenNamesFromSimulation = async (simName, locales, checkoutDir) => {
  const stringMap = await getFullStringMap(simName, checkoutDir);
  const packageObject = await loadJSON(`${checkoutDir}/${simName}/package.json`);
  const screenNameKeys = packageObject.phet.screenNameKeys || [];
  const result = {};
  for (const locale of locales) {
    result[locale] = screenNameKeys.map(key => stringMap[key][locale] || stringMap[key][locale.slice(0, 2)] || stringMap[key].en);
  }
  return result;
};
const parseScreenNamesAllSimulations = async () => {
  const url = 'https://phet.colorado.edu/services/metadata/1.3/simulations?format=json&type=html&summary';
  const projects = (await axios.get(url)).data.projects;
  const screenNameObject = {};
  for (let projectIndex = 0; projectIndex < projects.length; projectIndex++) {
    const project = projects[projectIndex];
    const simulation = project.simulations[0];
    const simName = simulation.name;
    const locales = Object.keys(simulation.localizedSimulations);
    await gitCheckout(simName, `${project.version.major}.${project.version.minor}`);
    screenNameObject[simName] = await parseScreenNamesFromSimulation(simName, locales, '..');
    await gitCheckout(simName, 'main');
  }
  return screenNameObject;
};
module.exports = {
  parseScreenNames: parseScreenNamesFromSimulation,
  parseScreenNamesAllSimulations: parseScreenNamesAllSimulations
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJheGlvcyIsInJlcXVpcmUiLCJnZXRGdWxsU3RyaW5nTWFwIiwibG9hZEpTT04iLCJnaXRDaGVja291dCIsInBhcnNlU2NyZWVuTmFtZXNGcm9tU2ltdWxhdGlvbiIsInNpbU5hbWUiLCJsb2NhbGVzIiwiY2hlY2tvdXREaXIiLCJzdHJpbmdNYXAiLCJwYWNrYWdlT2JqZWN0Iiwic2NyZWVuTmFtZUtleXMiLCJwaGV0IiwicmVzdWx0IiwibG9jYWxlIiwibWFwIiwia2V5Iiwic2xpY2UiLCJlbiIsInBhcnNlU2NyZWVuTmFtZXNBbGxTaW11bGF0aW9ucyIsInVybCIsInByb2plY3RzIiwiZ2V0IiwiZGF0YSIsInNjcmVlbk5hbWVPYmplY3QiLCJwcm9qZWN0SW5kZXgiLCJsZW5ndGgiLCJwcm9qZWN0Iiwic2ltdWxhdGlvbiIsInNpbXVsYXRpb25zIiwibmFtZSIsIk9iamVjdCIsImtleXMiLCJsb2NhbGl6ZWRTaW11bGF0aW9ucyIsInZlcnNpb24iLCJtYWpvciIsIm1pbm9yIiwibW9kdWxlIiwiZXhwb3J0cyIsInBhcnNlU2NyZWVuTmFtZXMiXSwic291cmNlcyI6WyJwYXJzZVNjcmVlbk5hbWVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuLy8gQGF1dGhvciBNYXR0IFBlbm5pbmd0b24gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcblxyXG5jb25zdCBheGlvcyA9IHJlcXVpcmUoICdheGlvcycgKTtcclxuY29uc3QgZ2V0RnVsbFN0cmluZ01hcCA9IHJlcXVpcmUoICcuL2dldEZ1bGxTdHJpbmdNYXAnICk7XHJcbmNvbnN0IGxvYWRKU09OID0gcmVxdWlyZSggJy4uL2NvbW1vbi9sb2FkSlNPTicgKTtcclxuY29uc3QgZ2l0Q2hlY2tvdXQgPSByZXF1aXJlKCAnLi4vY29tbW9uL2dpdENoZWNrb3V0JyApO1xyXG5cclxuLyoqXHJcbiAqIE5PVEU6IHJlbGVhc2UgYnJhbmNoIE5FRURTIHRvIGJlIGNoZWNrZWQgb3V0IGZvciB0aGlzIHRvIGJlIGNhbGxlZCwgc2luY2Ugd2UnbGwgbmVlZCB0aGUgZGVwZW5kZW5jaWVzLmpzb24gZmlsZVxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc2ltTmFtZVxyXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBsb2NhbGVzIC0gYSBsaXN0IG9mIGxvY2FsZSBjb2Rlc1xyXG4gKiBAcGFyYW0ge3N0cmluZ30gY2hlY2tvdXREaXJcclxuICogQHJldHVybnMge1Byb21pc2UuPHt9Pn1cclxuICovXHJcbmNvbnN0IHBhcnNlU2NyZWVuTmFtZXNGcm9tU2ltdWxhdGlvbiA9IGFzeW5jICggc2ltTmFtZSwgbG9jYWxlcywgY2hlY2tvdXREaXIgKSA9PiB7XHJcblxyXG4gIGNvbnN0IHN0cmluZ01hcCA9IGF3YWl0IGdldEZ1bGxTdHJpbmdNYXAoIHNpbU5hbWUsIGNoZWNrb3V0RGlyICk7XHJcbiAgY29uc3QgcGFja2FnZU9iamVjdCA9IGF3YWl0IGxvYWRKU09OKCBgJHtjaGVja291dERpcn0vJHtzaW1OYW1lfS9wYWNrYWdlLmpzb25gICk7XHJcbiAgY29uc3Qgc2NyZWVuTmFtZUtleXMgPSBwYWNrYWdlT2JqZWN0LnBoZXQuc2NyZWVuTmFtZUtleXMgfHwgW107XHJcblxyXG4gIGNvbnN0IHJlc3VsdCA9IHt9O1xyXG4gIGZvciAoIGNvbnN0IGxvY2FsZSBvZiBsb2NhbGVzICkge1xyXG4gICAgcmVzdWx0WyBsb2NhbGUgXSA9IHNjcmVlbk5hbWVLZXlzLm1hcCgga2V5ID0+IHN0cmluZ01hcFsga2V5IF1bIGxvY2FsZSBdIHx8IHN0cmluZ01hcFsga2V5IF1bIGxvY2FsZS5zbGljZSggMCwgMiApIF0gfHwgc3RyaW5nTWFwWyBrZXkgXS5lbiApO1xyXG4gIH1cclxuICByZXR1cm4gcmVzdWx0O1xyXG59O1xyXG5cclxuY29uc3QgcGFyc2VTY3JlZW5OYW1lc0FsbFNpbXVsYXRpb25zID0gYXN5bmMgKCkgPT4ge1xyXG4gIGNvbnN0IHVybCA9ICdodHRwczovL3BoZXQuY29sb3JhZG8uZWR1L3NlcnZpY2VzL21ldGFkYXRhLzEuMy9zaW11bGF0aW9ucz9mb3JtYXQ9anNvbiZ0eXBlPWh0bWwmc3VtbWFyeSc7XHJcbiAgY29uc3QgcHJvamVjdHMgPSAoIGF3YWl0IGF4aW9zLmdldCggdXJsICkgKS5kYXRhLnByb2plY3RzO1xyXG5cclxuICBjb25zdCBzY3JlZW5OYW1lT2JqZWN0ID0ge307XHJcblxyXG4gIGZvciAoIGxldCBwcm9qZWN0SW5kZXggPSAwOyBwcm9qZWN0SW5kZXggPCBwcm9qZWN0cy5sZW5ndGg7IHByb2plY3RJbmRleCsrICkge1xyXG4gICAgY29uc3QgcHJvamVjdCA9IHByb2plY3RzWyBwcm9qZWN0SW5kZXggXTtcclxuICAgIGNvbnN0IHNpbXVsYXRpb24gPSBwcm9qZWN0LnNpbXVsYXRpb25zWyAwIF07XHJcbiAgICBjb25zdCBzaW1OYW1lID0gc2ltdWxhdGlvbi5uYW1lO1xyXG4gICAgY29uc3QgbG9jYWxlcyA9IE9iamVjdC5rZXlzKCBzaW11bGF0aW9uLmxvY2FsaXplZFNpbXVsYXRpb25zICk7XHJcbiAgICBhd2FpdCBnaXRDaGVja291dCggc2ltTmFtZSwgYCR7cHJvamVjdC52ZXJzaW9uLm1ham9yfS4ke3Byb2plY3QudmVyc2lvbi5taW5vcn1gICk7XHJcbiAgICBzY3JlZW5OYW1lT2JqZWN0WyBzaW1OYW1lIF0gPSBhd2FpdCBwYXJzZVNjcmVlbk5hbWVzRnJvbVNpbXVsYXRpb24oIHNpbU5hbWUsIGxvY2FsZXMsICcuLicgKTtcclxuICAgIGF3YWl0IGdpdENoZWNrb3V0KCBzaW1OYW1lLCAnbWFpbicgKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBzY3JlZW5OYW1lT2JqZWN0O1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgcGFyc2VTY3JlZW5OYW1lczogcGFyc2VTY3JlZW5OYW1lc0Zyb21TaW11bGF0aW9uLFxyXG4gIHBhcnNlU2NyZWVuTmFtZXNBbGxT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