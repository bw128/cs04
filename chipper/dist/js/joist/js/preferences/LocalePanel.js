// Copyright 2022-2023, University of Colorado Boulder

/**
 * A UI component that allows you to change language of the simulation at runtime by controlling the localeProperty.
 * It appears in the "Localization" tab of the Preferences dialog.
 *
 * This is a first iteration of this UI component. It may be improved in the future. See
 * https://github.com/phetsims/joist/issues/814 for more history.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import joist from '../joist.js';
import Panel from '../../../sun/js/Panel.js';
import { GridBox } from '../../../scenery/js/imports.js';
import LanguageSelectionNode from './LanguageSelectionNode.js';
import JoistStrings from '../JoistStrings.js';
class LocalePanel extends Panel {
  constructor(localeProperty) {
    // All available locales aligned into a grid
    const content = new GridBox({
      xMargin: 5,
      xAlign: 'left',
      autoRows: 15,
      // By inspection, safety net in case there are too many languages. Will scale down this panel without
      // the entire PreferencesDialog scaling down.
      maxWidth: 1000,
      // We don't want the GridBox to resize as selection highlights update with input
      resize: false,
      children: localeProperty.validValues.map(locale => {
        return new LanguageSelectionNode(localeProperty, locale);
      })
    });
    super(content, {
      // pdom
      tagName: 'div',
      labelTagName: 'h3',
      labelContent: JoistStrings.a11y.preferences.tabs.localization.languageSelection.labelStringProperty,
      descriptionTagName: 'p',
      descriptionContent: JoistStrings.a11y.preferences.tabs.localization.languageSelection.descriptionStringProperty
    });
  }
}
joist.register('LocalePanel', LocalePanel);
export default LocalePanel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJqb2lzdCIsIlBhbmVsIiwiR3JpZEJveCIsIkxhbmd1YWdlU2VsZWN0aW9uTm9kZSIsIkpvaXN0U3RyaW5ncyIsIkxvY2FsZVBhbmVsIiwiY29uc3RydWN0b3IiLCJsb2NhbGVQcm9wZXJ0eSIsImNvbnRlbnQiLCJ4TWFyZ2luIiwieEFsaWduIiwiYXV0b1Jvd3MiLCJtYXhXaWR0aCIsInJlc2l6ZSIsImNoaWxkcmVuIiwidmFsaWRWYWx1ZXMiLCJtYXAiLCJsb2NhbGUiLCJ0YWdOYW1lIiwibGFiZWxUYWdOYW1lIiwibGFiZWxDb250ZW50IiwiYTExeSIsInByZWZlcmVuY2VzIiwidGFicyIsImxvY2FsaXphdGlvbiIsImxhbmd1YWdlU2VsZWN0aW9uIiwibGFiZWxTdHJpbmdQcm9wZXJ0eSIsImRlc2NyaXB0aW9uVGFnTmFtZSIsImRlc2NyaXB0aW9uQ29udGVudCIsImRlc2NyaXB0aW9uU3RyaW5nUHJvcGVydHkiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkxvY2FsZVBhbmVsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEEgVUkgY29tcG9uZW50IHRoYXQgYWxsb3dzIHlvdSB0byBjaGFuZ2UgbGFuZ3VhZ2Ugb2YgdGhlIHNpbXVsYXRpb24gYXQgcnVudGltZSBieSBjb250cm9sbGluZyB0aGUgbG9jYWxlUHJvcGVydHkuXHJcbiAqIEl0IGFwcGVhcnMgaW4gdGhlIFwiTG9jYWxpemF0aW9uXCIgdGFiIG9mIHRoZSBQcmVmZXJlbmNlcyBkaWFsb2cuXHJcbiAqXHJcbiAqIFRoaXMgaXMgYSBmaXJzdCBpdGVyYXRpb24gb2YgdGhpcyBVSSBjb21wb25lbnQuIEl0IG1heSBiZSBpbXByb3ZlZCBpbiB0aGUgZnV0dXJlLiBTZWVcclxuICogaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2pvaXN0L2lzc3Vlcy84MTQgZm9yIG1vcmUgaGlzdG9yeS5cclxuICpcclxuICogQGF1dGhvciBKZXNzZSBHcmVlbmJlcmcgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IGpvaXN0IGZyb20gJy4uL2pvaXN0LmpzJztcclxuaW1wb3J0IFBhbmVsIGZyb20gJy4uLy4uLy4uL3N1bi9qcy9QYW5lbC5qcyc7XHJcbmltcG9ydCB7IEdyaWRCb3ggfSBmcm9tICcuLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBMYW5ndWFnZVNlbGVjdGlvbk5vZGUgZnJvbSAnLi9MYW5ndWFnZVNlbGVjdGlvbk5vZGUuanMnO1xyXG5pbXBvcnQgeyBMb2NhbGUgfSBmcm9tICcuLi9pMThuL2xvY2FsZVByb3BlcnR5LmpzJztcclxuaW1wb3J0IEpvaXN0U3RyaW5ncyBmcm9tICcuLi9Kb2lzdFN0cmluZ3MuanMnO1xyXG5cclxuY2xhc3MgTG9jYWxlUGFuZWwgZXh0ZW5kcyBQYW5lbCB7XHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBsb2NhbGVQcm9wZXJ0eTogUHJvcGVydHk8TG9jYWxlPiApIHtcclxuXHJcbiAgICAvLyBBbGwgYXZhaWxhYmxlIGxvY2FsZXMgYWxpZ25lZCBpbnRvIGEgZ3JpZFxyXG4gICAgY29uc3QgY29udGVudCA9IG5ldyBHcmlkQm94KCB7XHJcbiAgICAgIHhNYXJnaW46IDUsXHJcbiAgICAgIHhBbGlnbjogJ2xlZnQnLFxyXG4gICAgICBhdXRvUm93czogMTUsXHJcblxyXG4gICAgICAvLyBCeSBpbnNwZWN0aW9uLCBzYWZldHkgbmV0IGluIGNhc2UgdGhlcmUgYXJlIHRvbyBtYW55IGxhbmd1YWdlcy4gV2lsbCBzY2FsZSBkb3duIHRoaXMgcGFuZWwgd2l0aG91dFxyXG4gICAgICAvLyB0aGUgZW50aXJlIFByZWZlcmVuY2VzRGlhbG9nIHNjYWxpbmcgZG93bi5cclxuICAgICAgbWF4V2lkdGg6IDEwMDAsXHJcblxyXG4gICAgICAvLyBXZSBkb24ndCB3YW50IHRoZSBHcmlkQm94IHRvIHJlc2l6ZSBhcyBzZWxlY3Rpb24gaGlnaGxpZ2h0cyB1cGRhdGUgd2l0aCBpbnB1dFxyXG4gICAgICByZXNpemU6IGZhbHNlLFxyXG4gICAgICBjaGlsZHJlbjogbG9jYWxlUHJvcGVydHkudmFsaWRWYWx1ZXMhLm1hcCggbG9jYWxlID0+IHtcclxuICAgICAgICByZXR1cm4gbmV3IExhbmd1YWdlU2VsZWN0aW9uTm9kZSggbG9jYWxlUHJvcGVydHksIGxvY2FsZSApO1xyXG4gICAgICB9IClcclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlciggY29udGVudCwge1xyXG5cclxuICAgICAgLy8gcGRvbVxyXG4gICAgICB0YWdOYW1lOiAnZGl2JyxcclxuICAgICAgbGFiZWxUYWdOYW1lOiAnaDMnLFxyXG4gICAgICBsYWJlbENvbnRlbnQ6IEpvaXN0U3RyaW5ncy5hMTF5LnByZWZlcmVuY2VzLnRhYnMubG9jYWxpemF0aW9uLmxhbmd1YWdlU2VsZWN0aW9uLmxhYmVsU3RyaW5nUHJvcGVydHksXHJcbiAgICAgIGRlc2NyaXB0aW9uVGFnTmFtZTogJ3AnLFxyXG4gICAgICBkZXNjcmlwdGlvbkNvbnRlbnQ6IEpvaXN0U3RyaW5ncy5hMTF5LnByZWZlcmVuY2VzLnRhYnMubG9jYWxpemF0aW9uLmxhbmd1YWdlU2VsZWN0aW9uLmRlc2NyaXB0aW9uU3RyaW5nUHJvcGVydHlcclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbmpvaXN0LnJlZ2lzdGVyKCAnTG9jYWxlUGFuZWwnLCBMb2NhbGVQYW5lbCApO1xyXG5leHBvcnQgZGVmYXVsdCBMb2NhbGVQYW5lbDsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxLQUFLLE1BQU0sYUFBYTtBQUMvQixPQUFPQyxLQUFLLE1BQU0sMEJBQTBCO0FBQzVDLFNBQVNDLE9BQU8sUUFBUSxnQ0FBZ0M7QUFFeEQsT0FBT0MscUJBQXFCLE1BQU0sNEJBQTRCO0FBRTlELE9BQU9DLFlBQVksTUFBTSxvQkFBb0I7QUFFN0MsTUFBTUMsV0FBVyxTQUFTSixLQUFLLENBQUM7RUFDdkJLLFdBQVdBLENBQUVDLGNBQWdDLEVBQUc7SUFFckQ7SUFDQSxNQUFNQyxPQUFPLEdBQUcsSUFBSU4sT0FBTyxDQUFFO01BQzNCTyxPQUFPLEVBQUUsQ0FBQztNQUNWQyxNQUFNLEVBQUUsTUFBTTtNQUNkQyxRQUFRLEVBQUUsRUFBRTtNQUVaO01BQ0E7TUFDQUMsUUFBUSxFQUFFLElBQUk7TUFFZDtNQUNBQyxNQUFNLEVBQUUsS0FBSztNQUNiQyxRQUFRLEVBQUVQLGNBQWMsQ0FBQ1EsV0FBVyxDQUFFQyxHQUFHLENBQUVDLE1BQU0sSUFBSTtRQUNuRCxPQUFPLElBQUlkLHFCQUFxQixDQUFFSSxjQUFjLEVBQUVVLE1BQU8sQ0FBQztNQUM1RCxDQUFFO0lBQ0osQ0FBRSxDQUFDO0lBRUgsS0FBSyxDQUFFVCxPQUFPLEVBQUU7TUFFZDtNQUNBVSxPQUFPLEVBQUUsS0FBSztNQUNkQyxZQUFZLEVBQUUsSUFBSTtNQUNsQkMsWUFBWSxFQUFFaEIsWUFBWSxDQUFDaUIsSUFBSSxDQUFDQyxXQUFXLENBQUNDLElBQUksQ0FBQ0MsWUFBWSxDQUFDQyxpQkFBaUIsQ0FBQ0MsbUJBQW1CO01BQ25HQyxrQkFBa0IsRUFBRSxHQUFHO01BQ3ZCQyxrQkFBa0IsRUFBRXhCLFlBQVksQ0FBQ2lCLElBQUksQ0FBQ0MsV0FBVyxDQUFDQyxJQUFJLENBQUNDLFlBQVksQ0FBQ0MsaUJBQWlCLENBQUNJO0lBQ3hGLENBQUUsQ0FBQztFQUNMO0FBQ0Y7QUFFQTdCLEtBQUssQ0FBQzhCLFFBQVEsQ0FBRSxhQUFhLEVBQUV6QixXQUFZLENBQUM7QUFDNUMsZUFBZUEsV0FBVyIsImlnbm9yZUxpc3QiOltdfQ==