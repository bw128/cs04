// Copyright 2022-2024, University of Colorado Boulder

/**
 * Stores the ground-truth order of locales used in translation fallback, with the first attempted (highest priority)
 * locale listed first.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import DerivedProperty from '../../../axon/js/DerivedProperty.js';
import joist from '../joist.js';
import localeProperty from './localeProperty.js';
import fallbackLocalesProperty from './fallbackLocalesProperty.js';
const FALLBACK_LOCALE = 'en';
const localeOrderProperty = new DerivedProperty([localeProperty, fallbackLocalesProperty], (locale, fallbackLocales) => {
  const localeOrder = [locale];

  // Attempt to fill in a language reduction for the selected locale, e.g. 'zh_CN' => 'zh'
  const shortLocale = locale.slice(0, 2);
  if (locale !== shortLocale && !localeOrder.includes(shortLocale)) {
    localeOrder.push(shortLocale);
  }

  // Add custom fallback locales if not already in the order
  for (let i = 0; i < fallbackLocales.length; i++) {
    const fallbackLocale = fallbackLocales[i];
    if (!localeOrder.includes(fallbackLocale)) {
      localeOrder.push(fallbackLocale);
    }
  }

  // Guaranteed fallback locale at the very end (if not already included)
  if (!localeOrder.includes(FALLBACK_LOCALE)) {
    localeOrder.push(FALLBACK_LOCALE);
  }
  const fallbackIndex = localeOrder.indexOf(FALLBACK_LOCALE);
  assert && assert(fallbackIndex >= 0, `Required local in localeOrderProperty: ${FALLBACK_LOCALE}`);

  // Optimization: Ignore locales past our fallback, because it will include a value for every single key.
  return localeOrder.slice(0, fallbackIndex + 1);
});
joist.register('localeOrderProperty', localeOrderProperty);
export default localeOrderProperty;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEZXJpdmVkUHJvcGVydHkiLCJqb2lzdCIsImxvY2FsZVByb3BlcnR5IiwiZmFsbGJhY2tMb2NhbGVzUHJvcGVydHkiLCJGQUxMQkFDS19MT0NBTEUiLCJsb2NhbGVPcmRlclByb3BlcnR5IiwibG9jYWxlIiwiZmFsbGJhY2tMb2NhbGVzIiwibG9jYWxlT3JkZXIiLCJzaG9ydExvY2FsZSIsInNsaWNlIiwiaW5jbHVkZXMiLCJwdXNoIiwiaSIsImxlbmd0aCIsImZhbGxiYWNrTG9jYWxlIiwiZmFsbGJhY2tJbmRleCIsImluZGV4T2YiLCJhc3NlcnQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbImxvY2FsZU9yZGVyUHJvcGVydHkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjItMjAyNCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogU3RvcmVzIHRoZSBncm91bmQtdHJ1dGggb3JkZXIgb2YgbG9jYWxlcyB1c2VkIGluIHRyYW5zbGF0aW9uIGZhbGxiYWNrLCB3aXRoIHRoZSBmaXJzdCBhdHRlbXB0ZWQgKGhpZ2hlc3QgcHJpb3JpdHkpXHJcbiAqIGxvY2FsZSBsaXN0ZWQgZmlyc3QuXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG5pbXBvcnQgRGVyaXZlZFByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvRGVyaXZlZFByb3BlcnR5LmpzJztcclxuaW1wb3J0IGpvaXN0IGZyb20gJy4uL2pvaXN0LmpzJztcclxuaW1wb3J0IGxvY2FsZVByb3BlcnR5LCB7IExvY2FsZSB9IGZyb20gJy4vbG9jYWxlUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgZmFsbGJhY2tMb2NhbGVzUHJvcGVydHkgZnJvbSAnLi9mYWxsYmFja0xvY2FsZXNQcm9wZXJ0eS5qcyc7XHJcblxyXG5jb25zdCBGQUxMQkFDS19MT0NBTEUgPSAnZW4nO1xyXG5cclxuY29uc3QgbG9jYWxlT3JkZXJQcm9wZXJ0eSA9IG5ldyBEZXJpdmVkUHJvcGVydHkoIFsgbG9jYWxlUHJvcGVydHksIGZhbGxiYWNrTG9jYWxlc1Byb3BlcnR5IF0sXHJcbiAgKCBsb2NhbGUsIGZhbGxiYWNrTG9jYWxlcyApID0+IHtcclxuXHJcbiAgY29uc3QgbG9jYWxlT3JkZXIgPSBbIGxvY2FsZSBdO1xyXG5cclxuICAvLyBBdHRlbXB0IHRvIGZpbGwgaW4gYSBsYW5ndWFnZSByZWR1Y3Rpb24gZm9yIHRoZSBzZWxlY3RlZCBsb2NhbGUsIGUuZy4gJ3poX0NOJyA9PiAnemgnXHJcbiAgY29uc3Qgc2hvcnRMb2NhbGUgPSBsb2NhbGUuc2xpY2UoIDAsIDIgKSBhcyBMb2NhbGU7XHJcbiAgaWYgKCBsb2NhbGUgIT09IHNob3J0TG9jYWxlICYmICFsb2NhbGVPcmRlci5pbmNsdWRlcyggc2hvcnRMb2NhbGUgKSApIHtcclxuICAgIGxvY2FsZU9yZGVyLnB1c2goIHNob3J0TG9jYWxlICk7XHJcbiAgfVxyXG5cclxuICAvLyBBZGQgY3VzdG9tIGZhbGxiYWNrIGxvY2FsZXMgaWYgbm90IGFscmVhZHkgaW4gdGhlIG9yZGVyXHJcbiAgZm9yICggbGV0IGkgPSAwOyBpIDwgZmFsbGJhY2tMb2NhbGVzLmxlbmd0aDsgaSsrICkge1xyXG4gICAgY29uc3QgZmFsbGJhY2tMb2NhbGUgPSBmYWxsYmFja0xvY2FsZXNbIGkgXTtcclxuICAgIGlmICggIWxvY2FsZU9yZGVyLmluY2x1ZGVzKCBmYWxsYmFja0xvY2FsZSApICkge1xyXG4gICAgICBsb2NhbGVPcmRlci5wdXNoKCBmYWxsYmFja0xvY2FsZSApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gR3VhcmFudGVlZCBmYWxsYmFjayBsb2NhbGUgYXQgdGhlIHZlcnkgZW5kIChpZiBub3QgYWxyZWFkeSBpbmNsdWRlZClcclxuICBpZiAoICFsb2NhbGVPcmRlci5pbmNsdWRlcyggRkFMTEJBQ0tfTE9DQUxFICkgKSB7XHJcbiAgICBsb2NhbGVPcmRlci5wdXNoKCBGQUxMQkFDS19MT0NBTEUgKTtcclxuICB9XHJcblxyXG4gIGNvbnN0IGZhbGxiYWNrSW5kZXggPSBsb2NhbGVPcmRlci5pbmRleE9mKCBGQUxMQkFDS19MT0NBTEUgKTtcclxuICBhc3NlcnQgJiYgYXNzZXJ0KCBmYWxsYmFja0luZGV4ID49IDAsIGBSZXF1aXJlZCBsb2NhbCBpbiBsb2NhbGVPcmRlclByb3BlcnR5OiAke0ZBTExCQUNLX0xPQ0FMRX1gICk7XHJcblxyXG4gIC8vIE9wdGltaXphdGlvbjogSWdub3JlIGxvY2FsZXMgcGFzdCBvdXIgZmFsbGJhY2ssIGJlY2F1c2UgaXQgd2lsbCBpbmNsdWRlIGEgdmFsdWUgZm9yIGV2ZXJ5IHNpbmdsZSBrZXkuXHJcbiAgcmV0dXJuIGxvY2FsZU9yZGVyLnNsaWNlKCAwLCBmYWxsYmFja0luZGV4ICsgMSApO1xyXG59ICk7XHJcblxyXG5qb2lzdC5yZWdpc3RlciggJ2xvY2FsZU9yZGVyUHJvcGVydHknLCBsb2NhbGVPcmRlclByb3BlcnR5ICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBsb2NhbGVPcmRlclByb3BlcnR5OyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGVBQWUsTUFBTSxxQ0FBcUM7QUFDakUsT0FBT0MsS0FBSyxNQUFNLGFBQWE7QUFDL0IsT0FBT0MsY0FBYyxNQUFrQixxQkFBcUI7QUFDNUQsT0FBT0MsdUJBQXVCLE1BQU0sOEJBQThCO0FBRWxFLE1BQU1DLGVBQWUsR0FBRyxJQUFJO0FBRTVCLE1BQU1DLG1CQUFtQixHQUFHLElBQUlMLGVBQWUsQ0FBRSxDQUFFRSxjQUFjLEVBQUVDLHVCQUF1QixDQUFFLEVBQzFGLENBQUVHLE1BQU0sRUFBRUMsZUFBZSxLQUFNO0VBRS9CLE1BQU1DLFdBQVcsR0FBRyxDQUFFRixNQUFNLENBQUU7O0VBRTlCO0VBQ0EsTUFBTUcsV0FBVyxHQUFHSCxNQUFNLENBQUNJLEtBQUssQ0FBRSxDQUFDLEVBQUUsQ0FBRSxDQUFXO0VBQ2xELElBQUtKLE1BQU0sS0FBS0csV0FBVyxJQUFJLENBQUNELFdBQVcsQ0FBQ0csUUFBUSxDQUFFRixXQUFZLENBQUMsRUFBRztJQUNwRUQsV0FBVyxDQUFDSSxJQUFJLENBQUVILFdBQVksQ0FBQztFQUNqQzs7RUFFQTtFQUNBLEtBQU0sSUFBSUksQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHTixlQUFlLENBQUNPLE1BQU0sRUFBRUQsQ0FBQyxFQUFFLEVBQUc7SUFDakQsTUFBTUUsY0FBYyxHQUFHUixlQUFlLENBQUVNLENBQUMsQ0FBRTtJQUMzQyxJQUFLLENBQUNMLFdBQVcsQ0FBQ0csUUFBUSxDQUFFSSxjQUFlLENBQUMsRUFBRztNQUM3Q1AsV0FBVyxDQUFDSSxJQUFJLENBQUVHLGNBQWUsQ0FBQztJQUNwQztFQUNGOztFQUVBO0VBQ0EsSUFBSyxDQUFDUCxXQUFXLENBQUNHLFFBQVEsQ0FBRVAsZUFBZ0IsQ0FBQyxFQUFHO0lBQzlDSSxXQUFXLENBQUNJLElBQUksQ0FBRVIsZUFBZ0IsQ0FBQztFQUNyQztFQUVBLE1BQU1ZLGFBQWEsR0FBR1IsV0FBVyxDQUFDUyxPQUFPLENBQUViLGVBQWdCLENBQUM7RUFDNURjLE1BQU0sSUFBSUEsTUFBTSxDQUFFRixhQUFhLElBQUksQ0FBQyxFQUFHLDBDQUF5Q1osZUFBZ0IsRUFBRSxDQUFDOztFQUVuRztFQUNBLE9BQU9JLFdBQVcsQ0FBQ0UsS0FBSyxDQUFFLENBQUMsRUFBRU0sYUFBYSxHQUFHLENBQUUsQ0FBQztBQUNsRCxDQUFFLENBQUM7QUFFSGYsS0FBSyxDQUFDa0IsUUFBUSxDQUFFLHFCQUFxQixFQUFFZCxtQkFBb0IsQ0FBQztBQUU1RCxlQUFlQSxtQkFBbUIiLCJpZ25vcmVMaXN0IjpbXX0=