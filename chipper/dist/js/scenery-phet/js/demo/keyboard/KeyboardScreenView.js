// Copyright 2022-2024, University of Colorado Boulder

/**
 * Demos for things in scenery-phet/js/keyboard/.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import DemosScreenView from '../../../../sun/js/demo/DemosScreenView.js';
import sceneryPhet from '../../sceneryPhet.js';
import demoBasicActionsKeyboardHelpSection from './demoBasicActionsKeyboardHelpSection.js';
import demoSliderControlsKeyboardHelpSection from './demoSliderControlsKeyboardHelpSection.js';
import demoComboBoxKeyboardHelpSection from './demoComboBoxKeyboardHelpSection.js';
import demoKeyNode from './demoKeyNode.js';
import demoKeyboardHelpSection from './demoKeyboardHelpSection.js';
import demoKeyboardHelpIconFactory from './demoKeyboardHelpIconFactory.js';
import demoFaucetControlsKeyboardHelpSection from './demoFaucetControlsKeyboardHelpSection.js';
export default class KeyboardScreenView extends DemosScreenView {
  constructor(providedOptions) {
    const options = optionize()({
      // nothing for now
    }, providedOptions);

    // To add a demo, add an entry here of type DemoItemData.
    const demos = [{
      label: 'BasicActionsKeyboardHelpSection',
      createNode: demoBasicActionsKeyboardHelpSection
    }, {
      label: 'ComboBoxKeyboardHelpSection',
      createNode: demoComboBoxKeyboardHelpSection
    }, {
      label: 'FaucetControlsKeyboardHelpSection',
      createNode: demoFaucetControlsKeyboardHelpSection
    }, {
      label: 'KeyboardHelpIconFactory',
      createNode: demoKeyboardHelpIconFactory
    }, {
      label: 'KeyboardHelpSection',
      createNode: demoKeyboardHelpSection
    }, {
      label: 'KeyNode',
      createNode: demoKeyNode
    }, {
      label: 'SliderControlsKeyboardHelpSection',
      createNode: demoSliderControlsKeyboardHelpSection
    }];
    super(demos, options);
  }
}
sceneryPhet.register('KeyboardScreenView', KeyboardScreenView);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJEZW1vc1NjcmVlblZpZXciLCJzY2VuZXJ5UGhldCIsImRlbW9CYXNpY0FjdGlvbnNLZXlib2FyZEhlbHBTZWN0aW9uIiwiZGVtb1NsaWRlckNvbnRyb2xzS2V5Ym9hcmRIZWxwU2VjdGlvbiIsImRlbW9Db21ib0JveEtleWJvYXJkSGVscFNlY3Rpb24iLCJkZW1vS2V5Tm9kZSIsImRlbW9LZXlib2FyZEhlbHBTZWN0aW9uIiwiZGVtb0tleWJvYXJkSGVscEljb25GYWN0b3J5IiwiZGVtb0ZhdWNldENvbnRyb2xzS2V5Ym9hcmRIZWxwU2VjdGlvbiIsIktleWJvYXJkU2NyZWVuVmlldyIsImNvbnN0cnVjdG9yIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsImRlbW9zIiwibGFiZWwiLCJjcmVhdGVOb2RlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJLZXlib2FyZFNjcmVlblZpZXcudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjItMjAyNCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogRGVtb3MgZm9yIHRoaW5ncyBpbiBzY2VuZXJ5LXBoZXQvanMva2V5Ym9hcmQvLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgUGlja1JlcXVpcmVkIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrUmVxdWlyZWQuanMnO1xyXG5pbXBvcnQgRGVtb3NTY3JlZW5WaWV3LCB7IERlbW9zU2NyZWVuVmlld09wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvZGVtby9EZW1vc1NjcmVlblZpZXcuanMnO1xyXG5pbXBvcnQgc2NlbmVyeVBoZXQgZnJvbSAnLi4vLi4vc2NlbmVyeVBoZXQuanMnO1xyXG5pbXBvcnQgZGVtb0Jhc2ljQWN0aW9uc0tleWJvYXJkSGVscFNlY3Rpb24gZnJvbSAnLi9kZW1vQmFzaWNBY3Rpb25zS2V5Ym9hcmRIZWxwU2VjdGlvbi5qcyc7XHJcbmltcG9ydCBkZW1vU2xpZGVyQ29udHJvbHNLZXlib2FyZEhlbHBTZWN0aW9uIGZyb20gJy4vZGVtb1NsaWRlckNvbnRyb2xzS2V5Ym9hcmRIZWxwU2VjdGlvbi5qcyc7XHJcbmltcG9ydCBkZW1vQ29tYm9Cb3hLZXlib2FyZEhlbHBTZWN0aW9uIGZyb20gJy4vZGVtb0NvbWJvQm94S2V5Ym9hcmRIZWxwU2VjdGlvbi5qcyc7XHJcbmltcG9ydCBkZW1vS2V5Tm9kZSBmcm9tICcuL2RlbW9LZXlOb2RlLmpzJztcclxuaW1wb3J0IGRlbW9LZXlib2FyZEhlbHBTZWN0aW9uIGZyb20gJy4vZGVtb0tleWJvYXJkSGVscFNlY3Rpb24uanMnO1xyXG5pbXBvcnQgZGVtb0tleWJvYXJkSGVscEljb25GYWN0b3J5IGZyb20gJy4vZGVtb0tleWJvYXJkSGVscEljb25GYWN0b3J5LmpzJztcclxuaW1wb3J0IGRlbW9GYXVjZXRDb250cm9sc0tleWJvYXJkSGVscFNlY3Rpb24gZnJvbSAnLi9kZW1vRmF1Y2V0Q29udHJvbHNLZXlib2FyZEhlbHBTZWN0aW9uLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG50eXBlIEtleWJvYXJkU2NyZWVuVmlld09wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFBpY2tSZXF1aXJlZDxEZW1vc1NjcmVlblZpZXdPcHRpb25zLCAndGFuZGVtJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBLZXlib2FyZFNjcmVlblZpZXcgZXh0ZW5kcyBEZW1vc1NjcmVlblZpZXcge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHByb3ZpZGVkT3B0aW9uczogS2V5Ym9hcmRTY3JlZW5WaWV3T3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPEtleWJvYXJkU2NyZWVuVmlld09wdGlvbnMsIFNlbGZPcHRpb25zLCBEZW1vc1NjcmVlblZpZXdPcHRpb25zPigpKCB7XHJcbiAgICAgIC8vIG5vdGhpbmcgZm9yIG5vd1xyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgLy8gVG8gYWRkIGEgZGVtbywgYWRkIGFuIGVudHJ5IGhlcmUgb2YgdHlwZSBEZW1vSXRlbURhdGEuXHJcbiAgICBjb25zdCBkZW1vcyA9IFtcclxuICAgICAgeyBsYWJlbDogJ0Jhc2ljQWN0aW9uc0tleWJvYXJkSGVscFNlY3Rpb24nLCBjcmVhdGVOb2RlOiBkZW1vQmFzaWNBY3Rpb25zS2V5Ym9hcmRIZWxwU2VjdGlvbiB9LFxyXG4gICAgICB7IGxhYmVsOiAnQ29tYm9Cb3hLZXlib2FyZEhlbHBTZWN0aW9uJywgY3JlYXRlTm9kZTogZGVtb0NvbWJvQm94S2V5Ym9hcmRIZWxwU2VjdGlvbiB9LFxyXG4gICAgICB7IGxhYmVsOiAnRmF1Y2V0Q29udHJvbHNLZXlib2FyZEhlbHBTZWN0aW9uJywgY3JlYXRlTm9kZTogZGVtb0ZhdWNldENvbnRyb2xzS2V5Ym9hcmRIZWxwU2VjdGlvbiB9LFxyXG4gICAgICB7IGxhYmVsOiAnS2V5Ym9hcmRIZWxwSWNvbkZhY3RvcnknLCBjcmVhdGVOb2RlOiBkZW1vS2V5Ym9hcmRIZWxwSWNvbkZhY3RvcnkgfSxcclxuICAgICAgeyBsYWJlbDogJ0tleWJvYXJkSGVscFNlY3Rpb24nLCBjcmVhdGVOb2RlOiBkZW1vS2V5Ym9hcmRIZWxwU2VjdGlvbiB9LFxyXG4gICAgICB7IGxhYmVsOiAnS2V5Tm9kZScsIGNyZWF0ZU5vZGU6IGRlbW9LZXlOb2RlIH0sXHJcbiAgICAgIHsgbGFiZWw6ICdTbGlkZXJDb250cm9sc0tleWJvYXJkSGVscFNlY3Rpb24nLCBjcmVhdGVOb2RlOiBkZW1vU2xpZGVyQ29udHJvbHNLZXlib2FyZEhlbHBTZWN0aW9uIH1cclxuICAgIF07XHJcblxyXG4gICAgc3VwZXIoIGRlbW9zLCBvcHRpb25zICk7XHJcbiAgfVxyXG59XHJcblxyXG5zY2VuZXJ5UGhldC5yZWdpc3RlciggJ0tleWJvYXJkU2NyZWVuVmlldycsIEtleWJvYXJkU2NyZWVuVmlldyApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxTQUFTLE1BQTRCLHVDQUF1QztBQUVuRixPQUFPQyxlQUFlLE1BQWtDLDRDQUE0QztBQUNwRyxPQUFPQyxXQUFXLE1BQU0sc0JBQXNCO0FBQzlDLE9BQU9DLG1DQUFtQyxNQUFNLDBDQUEwQztBQUMxRixPQUFPQyxxQ0FBcUMsTUFBTSw0Q0FBNEM7QUFDOUYsT0FBT0MsK0JBQStCLE1BQU0sc0NBQXNDO0FBQ2xGLE9BQU9DLFdBQVcsTUFBTSxrQkFBa0I7QUFDMUMsT0FBT0MsdUJBQXVCLE1BQU0sOEJBQThCO0FBQ2xFLE9BQU9DLDJCQUEyQixNQUFNLGtDQUFrQztBQUMxRSxPQUFPQyxxQ0FBcUMsTUFBTSw0Q0FBNEM7QUFLOUYsZUFBZSxNQUFNQyxrQkFBa0IsU0FBU1QsZUFBZSxDQUFDO0VBRXZEVSxXQUFXQSxDQUFFQyxlQUEwQyxFQUFHO0lBRS9ELE1BQU1DLE9BQU8sR0FBR2IsU0FBUyxDQUFpRSxDQUFDLENBQUU7TUFDM0Y7SUFBQSxDQUNELEVBQUVZLGVBQWdCLENBQUM7O0lBRXBCO0lBQ0EsTUFBTUUsS0FBSyxHQUFHLENBQ1o7TUFBRUMsS0FBSyxFQUFFLGlDQUFpQztNQUFFQyxVQUFVLEVBQUViO0lBQW9DLENBQUMsRUFDN0Y7TUFBRVksS0FBSyxFQUFFLDZCQUE2QjtNQUFFQyxVQUFVLEVBQUVYO0lBQWdDLENBQUMsRUFDckY7TUFBRVUsS0FBSyxFQUFFLG1DQUFtQztNQUFFQyxVQUFVLEVBQUVQO0lBQXNDLENBQUMsRUFDakc7TUFBRU0sS0FBSyxFQUFFLHlCQUF5QjtNQUFFQyxVQUFVLEVBQUVSO0lBQTRCLENBQUMsRUFDN0U7TUFBRU8sS0FBSyxFQUFFLHFCQUFxQjtNQUFFQyxVQUFVLEVBQUVUO0lBQXdCLENBQUMsRUFDckU7TUFBRVEsS0FBSyxFQUFFLFNBQVM7TUFBRUMsVUFBVSxFQUFFVjtJQUFZLENBQUMsRUFDN0M7TUFBRVMsS0FBSyxFQUFFLG1DQUFtQztNQUFFQyxVQUFVLEVBQUVaO0lBQXNDLENBQUMsQ0FDbEc7SUFFRCxLQUFLLENBQUVVLEtBQUssRUFBRUQsT0FBUSxDQUFDO0VBQ3pCO0FBQ0Y7QUFFQVgsV0FBVyxDQUFDZSxRQUFRLENBQUUsb0JBQW9CLEVBQUVQLGtCQUFtQixDQUFDIiwiaWdub3JlTGlzdCI6W119