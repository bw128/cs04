// Copyright 2019-2024, University of Colorado Boulder

/**
 * Node for an item in a combo box list.
 * Responsible for highlighting itself when the pointer is over it.
 * Typically instantiated by ComboBox, not by client code.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { Shape } from '../../kite/js/imports.js';
import optionize from '../../phet-core/js/optionize.js';
import { IndexedNodeIO, Node, PressListener, Rectangle, Voicing } from '../../scenery/js/imports.js';
import Tandem from '../../tandem/js/Tandem.js';
import sun from './sun.js';
import SunConstants from './SunConstants.js';
import Property from '../../axon/js/Property.js';
import PatternStringProperty from '../../axon/js/PatternStringProperty.js';
import DerivedProperty from '../../axon/js/DerivedProperty.js';
export default class ComboBoxListItemNode extends Voicing(Node) {
  // when true, the next voicing focus listener will supply the response needed when opening the comboBox.
  // It will then set this back to false.

  constructor(item, node, a11yNameProperty, highlightWidthProperty, highlightHeightProperty, providedOptions) {
    const options = optionize()({
      cursor: 'pointer',
      align: 'left',
      xMargin: 6,
      highlightFill: 'rgb( 245, 245, 245 )',
      highlightCornerRadius: 4,
      // pdom
      tagName: 'li',
      focusable: true,
      ariaRole: 'option',
      // the `li` with ariaRole `option` does not get click events on iOS VoiceOver, so position
      // elements so they receive pointer events
      positionInPDOM: true,
      // voicing
      voicingFocusListener: () => this.comboBoxListItemNodeVoicingFocusListener(),
      comboBoxVoicingNameResponsePattern: SunConstants.VALUE_NAMED_PLACEHOLDER,
      // phet-io
      tandem: Tandem.REQUIRED,
      tandemNameSuffix: 'Item',
      // Together, these options make it possible to reorder the combo box items in studio, and save a customized
      // simulation with the new order.
      phetioType: IndexedNodeIO,
      phetioState: true,
      visiblePropertyOptions: {
        phetioFeatured: true
      }
    }, providedOptions);

    // @ts-expect-error convert Property into string
    options.comboBoxVoicingNameResponsePattern = options.comboBoxVoicingNameResponsePattern.get ?
    // @ts-expect-error convert Property into string
    options.comboBoxVoicingNameResponsePattern.get() : options.comboBoxVoicingNameResponsePattern;

    // Don't test the contents of strings when ?stringTest is enabled
    assert && assert(!!phet.chipper.queryParameters.stringTest ||
    // @ts-expect-error is a string now.
    options.comboBoxVoicingNameResponsePattern.includes('{{value}}'), 'value needs to be filled in');

    // Highlight that is shown when the pointer is over this item. This is not the a11y focus rectangle.
    const highlightRectangle = new Rectangle({
      cornerRadius: options.highlightCornerRadius
    });

    // Wrapper for the item's Node. Do not transform item.node because it is shared with ComboBoxButton!
    const itemNodeWrapper = new Node({
      children: [node]
    });

    // Adjust the size when the highlight size changes.
    const highlightWidthListener = width => {
      highlightRectangle.rectWidth = width;
      itemNodeWrapper.maxWidth = width;
    };
    highlightWidthProperty.link(highlightWidthListener);
    const highlightHeightListener = height => {
      highlightRectangle.rectHeight = height;
      itemNodeWrapper.maxHeight = height;
    };
    highlightHeightProperty.link(highlightHeightListener);

    // Assume that item.node may change (as in ComboBoxDisplay) and adjust layout dynamically.
    // See https://github.com/phetsims/scenery-phet/issues/482
    const updateItemLayout = () => {
      if (options.align === 'left') {
        itemNodeWrapper.left = highlightRectangle.left + options.xMargin;
      } else if (options.align === 'right') {
        itemNodeWrapper.right = highlightRectangle.right - options.xMargin;
      } else {
        itemNodeWrapper.centerX = highlightRectangle.centerX;
      }
      itemNodeWrapper.centerY = highlightRectangle.centerY;
    };
    itemNodeWrapper.boundsProperty.lazyLink(updateItemLayout);
    updateItemLayout();
    options.children = [highlightRectangle, itemNodeWrapper];
    super(options);
    this._supplyOpenResponseOnNextFocus = false;
    const emptyA11yNameProperty = new DerivedProperty([a11yNameProperty], a11yName => {
      return a11yName ? a11yName : '';
    });

    // TODO: Allow comboBoxVoicingNameResponsePattern to change, see https://github.com/phetsims/sun/issues/865
    const patternProperty = typeof options.comboBoxVoicingNameResponsePattern === 'string' ? new Property(options.comboBoxVoicingNameResponsePattern) : options.comboBoxVoicingNameResponsePattern;
    // TODO: It seems unlinks are missing, and the existing code was broken, see https://github.com/phetsims/sun/issues/865
    const patternStringProperty = new PatternStringProperty(patternProperty, {
      value: emptyA11yNameProperty
    }, {
      tandem: Tandem.OPT_OUT
    });
    this.voicingNameResponse = patternStringProperty;
    const a11yNameListener = a11yName => {
      // pdom: get innerContent from the item
      this.innerContent = a11yName;
      this.voicingObjectResponse = a11yName;
    };
    a11yNameProperty.link(a11yNameListener);
    this.item = item;

    // pdom focus highlight is fitted to this Node's bounds, so that it doesn't overlap other items in the list box
    this.localBoundsProperty.link(localBounds => {
      this.focusHighlight = Shape.bounds(localBounds);
    });
    const pressListener = new PressListener({
      attach: false,
      tandem: Tandem.OPT_OUT
    });
    this.addInputListener(pressListener);

    // Show highlight when pointer is over this item.
    // Change fill instead of visibility so that we don't end up with vertical pointer gaps in the list
    pressListener.looksOverProperty.link(pressed => {
      highlightRectangle.fill = pressed ? options.highlightFill : null;
    });
    this.disposeComboBoxListItemNode = () => {
      pressListener.dispose();
      patternStringProperty.dispose();
      emptyA11yNameProperty.dispose();
      a11yNameProperty.unlink(a11yNameListener);
      highlightWidthProperty.unlink(highlightWidthListener);
      highlightHeightProperty.unlink(highlightHeightListener);
    };
  }

  /**
   * Ask for the voicing response for opening the ComboBox upon next focus, but only for the very next focus event.
   */
  supplyOpenResponseOnNextFocus() {
    this._supplyOpenResponseOnNextFocus = true;
  }

  /**
   * Free memory references to avoid leaks.
   */
  dispose() {
    this.disposeComboBoxListItemNode();
    super.dispose();
  }

  /**
   * A custom focus listener for this type, with conditional support for providing a normal focus vs an "open" response.
   */
  comboBoxListItemNodeVoicingFocusListener() {
    this.voicingSpeakFullResponse({
      nameResponse: this._supplyOpenResponseOnNextFocus ? this.voicingNameResponse : null,
      objectResponse: this._supplyOpenResponseOnNextFocus ? null : this.voicingObjectResponse,
      contextResponse: null,
      hintResponse: this._supplyOpenResponseOnNextFocus ? this.voicingHintResponse : null
    });
    this._supplyOpenResponseOnNextFocus = false;
  }
}
sun.register('ComboBoxListItemNode', ComboBoxListItemNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTaGFwZSIsIm9wdGlvbml6ZSIsIkluZGV4ZWROb2RlSU8iLCJOb2RlIiwiUHJlc3NMaXN0ZW5lciIsIlJlY3RhbmdsZSIsIlZvaWNpbmciLCJUYW5kZW0iLCJzdW4iLCJTdW5Db25zdGFudHMiLCJQcm9wZXJ0eSIsIlBhdHRlcm5TdHJpbmdQcm9wZXJ0eSIsIkRlcml2ZWRQcm9wZXJ0eSIsIkNvbWJvQm94TGlzdEl0ZW1Ob2RlIiwiY29uc3RydWN0b3IiLCJpdGVtIiwibm9kZSIsImExMXlOYW1lUHJvcGVydHkiLCJoaWdobGlnaHRXaWR0aFByb3BlcnR5IiwiaGlnaGxpZ2h0SGVpZ2h0UHJvcGVydHkiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiY3Vyc29yIiwiYWxpZ24iLCJ4TWFyZ2luIiwiaGlnaGxpZ2h0RmlsbCIsImhpZ2hsaWdodENvcm5lclJhZGl1cyIsInRhZ05hbWUiLCJmb2N1c2FibGUiLCJhcmlhUm9sZSIsInBvc2l0aW9uSW5QRE9NIiwidm9pY2luZ0ZvY3VzTGlzdGVuZXIiLCJjb21ib0JveExpc3RJdGVtTm9kZVZvaWNpbmdGb2N1c0xpc3RlbmVyIiwiY29tYm9Cb3hWb2ljaW5nTmFtZVJlc3BvbnNlUGF0dGVybiIsIlZBTFVFX05BTUVEX1BMQUNFSE9MREVSIiwidGFuZGVtIiwiUkVRVUlSRUQiLCJ0YW5kZW1OYW1lU3VmZml4IiwicGhldGlvVHlwZSIsInBoZXRpb1N0YXRlIiwidmlzaWJsZVByb3BlcnR5T3B0aW9ucyIsInBoZXRpb0ZlYXR1cmVkIiwiZ2V0IiwiYXNzZXJ0IiwicGhldCIsImNoaXBwZXIiLCJxdWVyeVBhcmFtZXRlcnMiLCJzdHJpbmdUZXN0IiwiaW5jbHVkZXMiLCJoaWdobGlnaHRSZWN0YW5nbGUiLCJjb3JuZXJSYWRpdXMiLCJpdGVtTm9kZVdyYXBwZXIiLCJjaGlsZHJlbiIsImhpZ2hsaWdodFdpZHRoTGlzdGVuZXIiLCJ3aWR0aCIsInJlY3RXaWR0aCIsIm1heFdpZHRoIiwibGluayIsImhpZ2hsaWdodEhlaWdodExpc3RlbmVyIiwiaGVpZ2h0IiwicmVjdEhlaWdodCIsIm1heEhlaWdodCIsInVwZGF0ZUl0ZW1MYXlvdXQiLCJsZWZ0IiwicmlnaHQiLCJjZW50ZXJYIiwiY2VudGVyWSIsImJvdW5kc1Byb3BlcnR5IiwibGF6eUxpbmsiLCJfc3VwcGx5T3BlblJlc3BvbnNlT25OZXh0Rm9jdXMiLCJlbXB0eUExMXlOYW1lUHJvcGVydHkiLCJhMTF5TmFtZSIsInBhdHRlcm5Qcm9wZXJ0eSIsInBhdHRlcm5TdHJpbmdQcm9wZXJ0eSIsInZhbHVlIiwiT1BUX09VVCIsInZvaWNpbmdOYW1lUmVzcG9uc2UiLCJhMTF5TmFtZUxpc3RlbmVyIiwiaW5uZXJDb250ZW50Iiwidm9pY2luZ09iamVjdFJlc3BvbnNlIiwibG9jYWxCb3VuZHNQcm9wZXJ0eSIsImxvY2FsQm91bmRzIiwiZm9jdXNIaWdobGlnaHQiLCJib3VuZHMiLCJwcmVzc0xpc3RlbmVyIiwiYXR0YWNoIiwiYWRkSW5wdXRMaXN0ZW5lciIsImxvb2tzT3ZlclByb3BlcnR5IiwicHJlc3NlZCIsImZpbGwiLCJkaXNwb3NlQ29tYm9Cb3hMaXN0SXRlbU5vZGUiLCJkaXNwb3NlIiwidW5saW5rIiwic3VwcGx5T3BlblJlc3BvbnNlT25OZXh0Rm9jdXMiLCJ2b2ljaW5nU3BlYWtGdWxsUmVzcG9uc2UiLCJuYW1lUmVzcG9uc2UiLCJvYmplY3RSZXNwb25zZSIsImNvbnRleHRSZXNwb25zZSIsImhpbnRSZXNwb25zZSIsInZvaWNpbmdIaW50UmVzcG9uc2UiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkNvbWJvQm94TGlzdEl0ZW1Ob2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjQsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE5vZGUgZm9yIGFuIGl0ZW0gaW4gYSBjb21ibyBib3ggbGlzdC5cclxuICogUmVzcG9uc2libGUgZm9yIGhpZ2hsaWdodGluZyBpdHNlbGYgd2hlbiB0aGUgcG9pbnRlciBpcyBvdmVyIGl0LlxyXG4gKiBUeXBpY2FsbHkgaW5zdGFudGlhdGVkIGJ5IENvbWJvQm94LCBub3QgYnkgY2xpZW50IGNvZGUuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgU2hhcGUgfSBmcm9tICcuLi8uLi9raXRlL2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgU3RyaWN0T21pdCBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvU3RyaWN0T21pdC5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCB7IEluZGV4ZWROb2RlSU8sIE5vZGUsIE5vZGVPcHRpb25zLCBQcmVzc0xpc3RlbmVyLCBSZWN0YW5nbGUsIFRQYWludCwgVm9pY2luZywgVm9pY2luZ09wdGlvbnMgfSBmcm9tICcuLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgc3VuIGZyb20gJy4vc3VuLmpzJztcclxuaW1wb3J0IFN1bkNvbnN0YW50cyBmcm9tICcuL1N1bkNvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBUUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuLi8uLi9heG9uL2pzL1RSZWFkT25seVByb3BlcnR5LmpzJztcclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgUGF0dGVyblN0cmluZ1Byb3BlcnR5IGZyb20gJy4uLy4uL2F4b24vanMvUGF0dGVyblN0cmluZ1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IHsgQ29tYm9Cb3hJdGVtTm9Ob2RlIH0gZnJvbSAnLi9Db21ib0JveC5qcyc7XHJcbmltcG9ydCBEZXJpdmVkUHJvcGVydHkgZnJvbSAnLi4vLi4vYXhvbi9qcy9EZXJpdmVkUHJvcGVydHkuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuICBhbGlnbj86ICdsZWZ0JyB8ICdyaWdodCcgfCAnY2VudGVyJztcclxuXHJcbiAgLy8gbWFyZ2luIGJldHdlZW4gdGhlIGl0ZW0gYW5kIHRoZSBoaWdobGlnaHQgZWRnZVxyXG4gIHhNYXJnaW4/OiBudW1iZXI7XHJcblxyXG4gIC8vIGhpZ2hsaWdodCBiZWhpbmQgdGhlIGl0ZW1cclxuICBoaWdobGlnaHRGaWxsPzogVFBhaW50O1xyXG5cclxuICAvLyBjb3JuZXIgcmFkaXVzIGZvciB0aGUgaGlnaGxpZ2h0XHJcbiAgaGlnaGxpZ2h0Q29ybmVyUmFkaXVzPzogbnVtYmVyO1xyXG5cclxuICBjb21ib0JveFZvaWNpbmdOYW1lUmVzcG9uc2VQYXR0ZXJuPzogVFJlYWRPbmx5UHJvcGVydHk8c3RyaW5nPiB8IHN0cmluZztcclxufTtcclxudHlwZSBQYXJlbnRPcHRpb25zID0gVm9pY2luZ09wdGlvbnMgJiBOb2RlT3B0aW9ucztcclxuZXhwb3J0IHR5cGUgQ29tYm9Cb3hMaXN0SXRlbU5vZGVPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBTdHJpY3RPbWl0PFBhcmVudE9wdGlvbnMsICdjaGlsZHJlbicgfCAnaW5uZXJDb250ZW50Jz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21ib0JveExpc3RJdGVtTm9kZTxUPiBleHRlbmRzIFZvaWNpbmcoIE5vZGUgKSB7XHJcblxyXG4gIC8vIHdoZW4gdHJ1ZSwgdGhlIG5leHQgdm9pY2luZyBmb2N1cyBsaXN0ZW5lciB3aWxsIHN1cHBseSB0aGUgcmVzcG9uc2UgbmVlZGVkIHdoZW4gb3BlbmluZyB0aGUgY29tYm9Cb3guXHJcbiAgLy8gSXQgd2lsbCB0aGVuIHNldCB0aGlzIGJhY2sgdG8gZmFsc2UuXHJcbiAgcHJpdmF0ZSBfc3VwcGx5T3BlblJlc3BvbnNlT25OZXh0Rm9jdXM6IGJvb2xlYW47XHJcblxyXG4gIHB1YmxpYyByZWFkb25seSBpdGVtOiBDb21ib0JveEl0ZW1Ob05vZGU8VD47XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgZGlzcG9zZUNvbWJvQm94TGlzdEl0ZW1Ob2RlOiAoKSA9PiB2b2lkO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoXHJcbiAgICBpdGVtOiBDb21ib0JveEl0ZW1Ob05vZGU8VD4sXHJcbiAgICBub2RlOiBOb2RlLFxyXG4gICAgYTExeU5hbWVQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8c3RyaW5nIHwgbnVsbD4sXHJcbiAgICBoaWdobGlnaHRXaWR0aFByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxudW1iZXI+LFxyXG4gICAgaGlnaGxpZ2h0SGVpZ2h0UHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PG51bWJlcj4sXHJcbiAgICBwcm92aWRlZE9wdGlvbnM/OiBDb21ib0JveExpc3RJdGVtTm9kZU9wdGlvbnNcclxuICApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPENvbWJvQm94TGlzdEl0ZW1Ob2RlT3B0aW9ucywgU2VsZk9wdGlvbnMsIFBhcmVudE9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxyXG4gICAgICBhbGlnbjogJ2xlZnQnLFxyXG4gICAgICB4TWFyZ2luOiA2LFxyXG4gICAgICBoaWdobGlnaHRGaWxsOiAncmdiKCAyNDUsIDI0NSwgMjQ1ICknLFxyXG4gICAgICBoaWdobGlnaHRDb3JuZXJSYWRpdXM6IDQsXHJcblxyXG4gICAgICAvLyBwZG9tXHJcbiAgICAgIHRhZ05hbWU6ICdsaScsXHJcbiAgICAgIGZvY3VzYWJsZTogdHJ1ZSxcclxuICAgICAgYXJpYVJvbGU6ICdvcHRpb24nLFxyXG5cclxuICAgICAgLy8gdGhlIGBsaWAgd2l0aCBhcmlhUm9sZSBgb3B0aW9uYCBkb2VzIG5vdCBnZXQgY2xpY2sgZXZlbnRzIG9uIGlPUyBWb2ljZU92ZXIsIHNvIHBvc2l0aW9uXHJcbiAgICAgIC8vIGVsZW1lbnRzIHNvIHRoZXkgcmVjZWl2ZSBwb2ludGVyIGV2ZW50c1xyXG4gICAgICBwb3NpdGlvbkluUERPTTogdHJ1ZSxcclxuXHJcbiAgICAgIC8vIHZvaWNpbmdcclxuICAgICAgdm9pY2luZ0ZvY3VzTGlzdGVuZXI6ICgpID0+IHRoaXMuY29tYm9Cb3hMaXN0SXRlbU5vZGVWb2ljaW5nRm9jdXNMaXN0ZW5lcigpLFxyXG4gICAgICBjb21ib0JveFZvaWNpbmdOYW1lUmVzcG9uc2VQYXR0ZXJuOiBTdW5Db25zdGFudHMuVkFMVUVfTkFNRURfUExBQ0VIT0xERVIsXHJcblxyXG4gICAgICAvLyBwaGV0LWlvXHJcbiAgICAgIHRhbmRlbTogVGFuZGVtLlJFUVVJUkVELFxyXG4gICAgICB0YW5kZW1OYW1lU3VmZml4OiAnSXRlbScsXHJcblxyXG4gICAgICAvLyBUb2dldGhlciwgdGhlc2Ugb3B0aW9ucyBtYWtlIGl0IHBvc3NpYmxlIHRvIHJlb3JkZXIgdGhlIGNvbWJvIGJveCBpdGVtcyBpbiBzdHVkaW8sIGFuZCBzYXZlIGEgY3VzdG9taXplZFxyXG4gICAgICAvLyBzaW11bGF0aW9uIHdpdGggdGhlIG5ldyBvcmRlci5cclxuICAgICAgcGhldGlvVHlwZTogSW5kZXhlZE5vZGVJTyxcclxuICAgICAgcGhldGlvU3RhdGU6IHRydWUsXHJcbiAgICAgIHZpc2libGVQcm9wZXJ0eU9wdGlvbnM6IHsgcGhldGlvRmVhdHVyZWQ6IHRydWUgfVxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciBjb252ZXJ0IFByb3BlcnR5IGludG8gc3RyaW5nXHJcbiAgICBvcHRpb25zLmNvbWJvQm94Vm9pY2luZ05hbWVSZXNwb25zZVBhdHRlcm4gPSBvcHRpb25zLmNvbWJvQm94Vm9pY2luZ05hbWVSZXNwb25zZVBhdHRlcm4uZ2V0ID9cclxuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBjb252ZXJ0IFByb3BlcnR5IGludG8gc3RyaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmNvbWJvQm94Vm9pY2luZ05hbWVSZXNwb25zZVBhdHRlcm4uZ2V0KCkgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5jb21ib0JveFZvaWNpbmdOYW1lUmVzcG9uc2VQYXR0ZXJuO1xyXG5cclxuICAgIC8vIERvbid0IHRlc3QgdGhlIGNvbnRlbnRzIG9mIHN0cmluZ3Mgd2hlbiA/c3RyaW5nVGVzdCBpcyBlbmFibGVkXHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCAhIXBoZXQuY2hpcHBlci5xdWVyeVBhcmFtZXRlcnMuc3RyaW5nVGVzdCB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBpcyBhIHN0cmluZyBub3cuXHJcbiAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmNvbWJvQm94Vm9pY2luZ05hbWVSZXNwb25zZVBhdHRlcm4uaW5jbHVkZXMoICd7e3ZhbHVlfX0nICksXHJcbiAgICAgICd2YWx1ZSBuZWVkcyB0byBiZSBmaWxsZWQgaW4nICk7XHJcblxyXG4gICAgLy8gSGlnaGxpZ2h0IHRoYXQgaXMgc2hvd24gd2hlbiB0aGUgcG9pbnRlciBpcyBvdmVyIHRoaXMgaXRlbS4gVGhpcyBpcyBub3QgdGhlIGExMXkgZm9jdXMgcmVjdGFuZ2xlLlxyXG4gICAgY29uc3QgaGlnaGxpZ2h0UmVjdGFuZ2xlID0gbmV3IFJlY3RhbmdsZSgge1xyXG4gICAgICBjb3JuZXJSYWRpdXM6IG9wdGlvbnMuaGlnaGxpZ2h0Q29ybmVyUmFkaXVzXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gV3JhcHBlciBmb3IgdGhlIGl0ZW0ncyBOb2RlLiBEbyBub3QgdHJhbnNmb3JtIGl0ZW0ubm9kZSBiZWNhdXNlIGl0IGlzIHNoYXJlZCB3aXRoIENvbWJvQm94QnV0dG9uIVxyXG4gICAgY29uc3QgaXRlbU5vZGVXcmFwcGVyID0gbmV3IE5vZGUoIHtcclxuICAgICAgY2hpbGRyZW46IFsgbm9kZSBdXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gQWRqdXN0IHRoZSBzaXplIHdoZW4gdGhlIGhpZ2hsaWdodCBzaXplIGNoYW5nZXMuXHJcbiAgICBjb25zdCBoaWdobGlnaHRXaWR0aExpc3RlbmVyID0gKCB3aWR0aDogbnVtYmVyICkgPT4ge1xyXG4gICAgICBoaWdobGlnaHRSZWN0YW5nbGUucmVjdFdpZHRoID0gd2lkdGg7XHJcbiAgICAgIGl0ZW1Ob2RlV3JhcHBlci5tYXhXaWR0aCA9IHdpZHRoO1xyXG4gICAgfTtcclxuICAgIGhpZ2hsaWdodFdpZHRoUHJvcGVydHkubGluayggaGlnaGxpZ2h0V2lkdGhMaXN0ZW5lciApO1xyXG4gICAgY29uc3QgaGlnaGxpZ2h0SGVpZ2h0TGlzdGVuZXIgPSAoIGhlaWdodDogbnVtYmVyICkgPT4ge1xyXG4gICAgICBoaWdobGlnaHRSZWN0YW5nbGUucmVjdEhlaWdodCA9IGhlaWdodDtcclxuICAgICAgaXRlbU5vZGVXcmFwcGVyLm1heEhlaWdodCA9IGhlaWdodDtcclxuICAgIH07XHJcbiAgICBoaWdobGlnaHRIZWlnaHRQcm9wZXJ0eS5saW5rKCBoaWdobGlnaHRIZWlnaHRMaXN0ZW5lciApO1xyXG5cclxuICAgIC8vIEFzc3VtZSB0aGF0IGl0ZW0ubm9kZSBtYXkgY2hhbmdlIChhcyBpbiBDb21ib0JveERpc3BsYXkpIGFuZCBhZGp1c3QgbGF5b3V0IGR5bmFtaWNhbGx5LlxyXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9zY2VuZXJ5LXBoZXQvaXNzdWVzLzQ4MlxyXG4gICAgY29uc3QgdXBkYXRlSXRlbUxheW91dCA9ICgpID0+IHtcclxuICAgICAgaWYgKCBvcHRpb25zLmFsaWduID09PSAnbGVmdCcgKSB7XHJcbiAgICAgICAgaXRlbU5vZGVXcmFwcGVyLmxlZnQgPSBoaWdobGlnaHRSZWN0YW5nbGUubGVmdCArIG9wdGlvbnMueE1hcmdpbjtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmICggb3B0aW9ucy5hbGlnbiA9PT0gJ3JpZ2h0JyApIHtcclxuICAgICAgICBpdGVtTm9kZVdyYXBwZXIucmlnaHQgPSBoaWdobGlnaHRSZWN0YW5nbGUucmlnaHQgLSBvcHRpb25zLnhNYXJnaW47XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgaXRlbU5vZGVXcmFwcGVyLmNlbnRlclggPSBoaWdobGlnaHRSZWN0YW5nbGUuY2VudGVyWDtcclxuICAgICAgfVxyXG4gICAgICBpdGVtTm9kZVdyYXBwZXIuY2VudGVyWSA9IGhpZ2hsaWdodFJlY3RhbmdsZS5jZW50ZXJZO1xyXG4gICAgfTtcclxuICAgIGl0ZW1Ob2RlV3JhcHBlci5ib3VuZHNQcm9wZXJ0eS5sYXp5TGluayggdXBkYXRlSXRlbUxheW91dCApO1xyXG4gICAgdXBkYXRlSXRlbUxheW91dCgpO1xyXG5cclxuICAgIG9wdGlvbnMuY2hpbGRyZW4gPSBbIGhpZ2hsaWdodFJlY3RhbmdsZSwgaXRlbU5vZGVXcmFwcGVyIF07XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuICAgIHRoaXMuX3N1cHBseU9wZW5SZXNwb25zZU9uTmV4dEZvY3VzID0gZmFsc2U7XHJcblxyXG4gICAgY29uc3QgZW1wdHlBMTF5TmFtZVByb3BlcnR5ID0gbmV3IERlcml2ZWRQcm9wZXJ0eSggWyBhMTF5TmFtZVByb3BlcnR5IF0sICggYTExeU5hbWU6IHN0cmluZyB8IG51bGwgKSA9PiB7XHJcbiAgICAgIHJldHVybiBhMTF5TmFtZSA/IGExMXlOYW1lIDogJyc7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gVE9ETzogQWxsb3cgY29tYm9Cb3hWb2ljaW5nTmFtZVJlc3BvbnNlUGF0dGVybiB0byBjaGFuZ2UsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvc3VuL2lzc3Vlcy84NjVcclxuICAgIGNvbnN0IHBhdHRlcm5Qcm9wZXJ0eSA9IHR5cGVvZiBvcHRpb25zLmNvbWJvQm94Vm9pY2luZ05hbWVSZXNwb25zZVBhdHRlcm4gPT09ICdzdHJpbmcnID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBQcm9wZXJ0eSggb3B0aW9ucy5jb21ib0JveFZvaWNpbmdOYW1lUmVzcG9uc2VQYXR0ZXJuICkgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5jb21ib0JveFZvaWNpbmdOYW1lUmVzcG9uc2VQYXR0ZXJuO1xyXG4gICAgLy8gVE9ETzogSXQgc2VlbXMgdW5saW5rcyBhcmUgbWlzc2luZywgYW5kIHRoZSBleGlzdGluZyBjb2RlIHdhcyBicm9rZW4sIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvc3VuL2lzc3Vlcy84NjVcclxuICAgIGNvbnN0IHBhdHRlcm5TdHJpbmdQcm9wZXJ0eSA9IG5ldyBQYXR0ZXJuU3RyaW5nUHJvcGVydHkoIHBhdHRlcm5Qcm9wZXJ0eSwge1xyXG4gICAgICB2YWx1ZTogZW1wdHlBMTF5TmFtZVByb3BlcnR5XHJcbiAgICB9LCB7IHRhbmRlbTogVGFuZGVtLk9QVF9PVVQgfSApO1xyXG4gICAgdGhpcy52b2ljaW5nTmFtZVJlc3BvbnNlID0gcGF0dGVyblN0cmluZ1Byb3BlcnR5O1xyXG5cclxuICAgIGNvbnN0IGExMXlOYW1lTGlzdGVuZXIgPSAoIGExMXlOYW1lOiBzdHJpbmcgfCBudWxsICkgPT4ge1xyXG4gICAgICAvLyBwZG9tOiBnZXQgaW5uZXJDb250ZW50IGZyb20gdGhlIGl0ZW1cclxuICAgICAgdGhpcy5pbm5lckNvbnRlbnQgPSBhMTF5TmFtZTtcclxuICAgICAgdGhpcy52b2ljaW5nT2JqZWN0UmVzcG9uc2UgPSBhMTF5TmFtZTtcclxuICAgIH07XHJcbiAgICBhMTF5TmFtZVByb3BlcnR5LmxpbmsoIGExMXlOYW1lTGlzdGVuZXIgKTtcclxuXHJcbiAgICB0aGlzLml0ZW0gPSBpdGVtO1xyXG5cclxuICAgIC8vIHBkb20gZm9jdXMgaGlnaGxpZ2h0IGlzIGZpdHRlZCB0byB0aGlzIE5vZGUncyBib3VuZHMsIHNvIHRoYXQgaXQgZG9lc24ndCBvdmVybGFwIG90aGVyIGl0ZW1zIGluIHRoZSBsaXN0IGJveFxyXG4gICAgdGhpcy5sb2NhbEJvdW5kc1Byb3BlcnR5LmxpbmsoIGxvY2FsQm91bmRzID0+IHtcclxuICAgICAgdGhpcy5mb2N1c0hpZ2hsaWdodCA9IFNoYXBlLmJvdW5kcyggbG9jYWxCb3VuZHMgKTtcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBwcmVzc0xpc3RlbmVyID0gbmV3IFByZXNzTGlzdGVuZXIoIHtcclxuICAgICAgYXR0YWNoOiBmYWxzZSxcclxuICAgICAgdGFuZGVtOiBUYW5kZW0uT1BUX09VVFxyXG4gICAgfSApO1xyXG4gICAgdGhpcy5hZGRJbnB1dExpc3RlbmVyKCBwcmVzc0xpc3RlbmVyICk7XHJcblxyXG4gICAgLy8gU2hvdyBoaWdobGlnaHQgd2hlbiBwb2ludGVyIGlzIG92ZXIgdGhpcyBpdGVtLlxyXG4gICAgLy8gQ2hhbmdlIGZpbGwgaW5zdGVhZCBvZiB2aXNpYmlsaXR5IHNvIHRoYXQgd2UgZG9uJ3QgZW5kIHVwIHdpdGggdmVydGljYWwgcG9pbnRlciBnYXBzIGluIHRoZSBsaXN0XHJcbiAgICBwcmVzc0xpc3RlbmVyLmxvb2tzT3ZlclByb3BlcnR5LmxpbmsoIHByZXNzZWQgPT4ge1xyXG4gICAgICBoaWdobGlnaHRSZWN0YW5nbGUuZmlsbCA9IHByZXNzZWQgPyBvcHRpb25zLmhpZ2hsaWdodEZpbGwgOiBudWxsO1xyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMuZGlzcG9zZUNvbWJvQm94TGlzdEl0ZW1Ob2RlID0gKCkgPT4ge1xyXG4gICAgICBwcmVzc0xpc3RlbmVyLmRpc3Bvc2UoKTtcclxuICAgICAgcGF0dGVyblN0cmluZ1Byb3BlcnR5LmRpc3Bvc2UoKTtcclxuICAgICAgZW1wdHlBMTF5TmFtZVByb3BlcnR5LmRpc3Bvc2UoKTtcclxuICAgICAgYTExeU5hbWVQcm9wZXJ0eS51bmxpbmsoIGExMXlOYW1lTGlzdGVuZXIgKTtcclxuICAgICAgaGlnaGxpZ2h0V2lkdGhQcm9wZXJ0eS51bmxpbmsoIGhpZ2hsaWdodFdpZHRoTGlzdGVuZXIgKTtcclxuICAgICAgaGlnaGxpZ2h0SGVpZ2h0UHJvcGVydHkudW5saW5rKCBoaWdobGlnaHRIZWlnaHRMaXN0ZW5lciApO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFzayBmb3IgdGhlIHZvaWNpbmcgcmVzcG9uc2UgZm9yIG9wZW5pbmcgdGhlIENvbWJvQm94IHVwb24gbmV4dCBmb2N1cywgYnV0IG9ubHkgZm9yIHRoZSB2ZXJ5IG5leHQgZm9jdXMgZXZlbnQuXHJcbiAgICovXHJcbiAgcHVibGljIHN1cHBseU9wZW5SZXNwb25zZU9uTmV4dEZvY3VzKCk6IHZvaWQge1xyXG4gICAgdGhpcy5fc3VwcGx5T3BlblJlc3BvbnNlT25OZXh0Rm9jdXMgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRnJlZSBtZW1vcnkgcmVmZXJlbmNlcyB0byBhdm9pZCBsZWFrcy5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuZGlzcG9zZUNvbWJvQm94TGlzdEl0ZW1Ob2RlKCk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBIGN1c3RvbSBmb2N1cyBsaXN0ZW5lciBmb3IgdGhpcyB0eXBlLCB3aXRoIGNvbmRpdGlvbmFsIHN1cHBvcnQgZm9yIHByb3ZpZGluZyBhIG5vcm1hbCBmb2N1cyB2cyBhbiBcIm9wZW5cIiByZXNwb25zZS5cclxuICAgKi9cclxuICBwcml2YXRlIGNvbWJvQm94TGlzdEl0ZW1Ob2RlVm9pY2luZ0ZvY3VzTGlzdGVuZXIoKTogdm9pZCB7XHJcbiAgICB0aGlzLnZvaWNpbmdTcGVha0Z1bGxSZXNwb25zZSgge1xyXG4gICAgICBuYW1lUmVzcG9uc2U6IHRoaXMuX3N1cHBseU9wZW5SZXNwb25zZU9uTmV4dEZvY3VzID8gdGhpcy52b2ljaW5nTmFtZVJlc3BvbnNlIDogbnVsbCxcclxuICAgICAgb2JqZWN0UmVzcG9uc2U6IHRoaXMuX3N1cHBseU9wZW5SZXNwb25zZU9uTmV4dEZvY3VzID8gbnVsbCA6IHRoaXMudm9pY2luZ09iamVjdFJlc3BvbnNlLFxyXG4gICAgICBjb250ZXh0UmVzcG9uc2U6IG51bGwsXHJcbiAgICAgIGhpbnRSZXNwb25zZTogdGhpcy5fc3VwcGx5T3BlblJlc3BvbnNlT25OZXh0Rm9jdXMgPyB0aGlzLnZvaWNpbmdIaW50UmVzcG9uc2UgOiBudWxsXHJcbiAgICB9ICk7XHJcbiAgICB0aGlzLl9zdXBwbHlPcGVuUmVzcG9uc2VPbk5leHRGb2N1cyA9IGZhbHNlO1xyXG4gIH1cclxufVxyXG5cclxuc3VuLnJlZ2lzdGVyKCAnQ29tYm9Cb3hMaXN0SXRlbU5vZGUnLCBDb21ib0JveExpc3RJdGVtTm9kZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsS0FBSyxRQUFRLDBCQUEwQjtBQUVoRCxPQUFPQyxTQUFTLE1BQU0saUNBQWlDO0FBQ3ZELFNBQVNDLGFBQWEsRUFBRUMsSUFBSSxFQUFlQyxhQUFhLEVBQUVDLFNBQVMsRUFBVUMsT0FBTyxRQUF3Qiw2QkFBNkI7QUFDekksT0FBT0MsTUFBTSxNQUFNLDJCQUEyQjtBQUM5QyxPQUFPQyxHQUFHLE1BQU0sVUFBVTtBQUMxQixPQUFPQyxZQUFZLE1BQU0sbUJBQW1CO0FBRTVDLE9BQU9DLFFBQVEsTUFBTSwyQkFBMkI7QUFDaEQsT0FBT0MscUJBQXFCLE1BQU0sd0NBQXdDO0FBRTFFLE9BQU9DLGVBQWUsTUFBTSxrQ0FBa0M7QUFtQjlELGVBQWUsTUFBTUMsb0JBQW9CLFNBQVlQLE9BQU8sQ0FBRUgsSUFBSyxDQUFDLENBQUM7RUFFbkU7RUFDQTs7RUFPT1csV0FBV0EsQ0FDaEJDLElBQTJCLEVBQzNCQyxJQUFVLEVBQ1ZDLGdCQUFrRCxFQUNsREMsc0JB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