"use strict";

// Copyright 2018-2024, University of Colorado Boulder

/**
 * Fills in values for the chipper initialization script script.
 *
 * NOTE: This should not be minified! It contains licenses that should be human readable as well as important formatting
 * for rosetta translation.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

// modules
var assert = require('assert');
var ChipperConstants = require('../common/ChipperConstants');
var ChipperStringUtils = require('../common/ChipperStringUtils');
var grunt = require('grunt');
var transpile = require('./transpile');
var stringEncoding = require('../common/stringEncoding');

/**
 * Returns a string for the JS of the initialization script.
 * @public
 *
 * @param {Object} config
 * @returns {string}
 */
module.exports = function (config) {
  var brand = config.brand,
    repo = config.repo,
    stringMap = config.stringMap,
    stringMetadata = config.stringMetadata,
    version = config.version,
    dependencies = config.dependencies,
    timestamp = config.timestamp,
    locale = config.locale,
    includeAllLocales = config.includeAllLocales,
    isDebugBuild = config.isDebugBuild,
    allowLocaleSwitching = config.allowLocaleSwitching,
    encodeStringMap = config.encodeStringMap,
    profileFileSize = config.profileFileSize,
    packageObject = config.packageObject;
  assert(typeof repo === 'string', 'Requires repo');
  assert(stringMap, 'Requires stringMap');
  assert(typeof version === 'string', 'Requires version');
  assert(dependencies, 'Requires dependencies');
  assert(typeof timestamp === 'string', 'Requires timestamp');
  assert(typeof locale === 'string', 'Requires locale');
  assert(typeof includeAllLocales === 'boolean', 'Requires includeAllLocales');
  assert(typeof isDebugBuild === 'boolean', 'Requires isDebugBuild');
  var phetStrings = stringMap;
  if (!includeAllLocales) {
    phetStrings = {};
    phetStrings[ChipperConstants.FALLBACK_LOCALE] = stringMap[ChipperConstants.FALLBACK_LOCALE];
    if (locale !== ChipperConstants.FALLBACK_LOCALE) {
      phetStrings[locale] = stringMap[locale];
    }
    var splitLocale = locale.slice(0, 2);
    if (locale.length > 2 && splitLocale !== ChipperConstants.FALLBACK_LOCALE) {
      phetStrings[splitLocale] = stringMap[splitLocale];
    }
  }
  return ChipperStringUtils.replacePlaceholders(grunt.file.read('../chipper/templates/chipper-initialization.js'), {
    PHET_PROJECT: repo,
    PHET_VERSION: version,
    PHET_BUILD_TIMESTAMP: timestamp,
    PHET_BRAND: brand,
    PHET_LOCALE: locale,
    PHET_DEPENDENCIES: JSON.stringify(dependencies, null, 2),
    // If it's a debug build, don't encode the strings, so that they are easier to inspect
    PHET_STRINGS: isDebugBuild || !encodeStringMap ? JSON.stringify(phetStrings, null, isDebugBuild ? 2 : '') : stringEncoding.encodeStringMapToJS(phetStrings),
    PHET_BEFORE_STRINGS: profileFileSize ? 'console.log("START_STRINGS");' : '',
    PHET_AFTER_STRINGS: profileFileSize ? 'console.log("END_STRINGS");' : '',
    PHET_STRING_METADATA: JSON.stringify(stringMetadata, null, isDebugBuild ? 2 : ''),
    PHET_IS_DEBUG_BUILD: !!isDebugBuild,
    PHET_ALLOW_LOCALE_SWITCHING: !!allowLocaleSwitching,
    PHET_PACKAGE_OBJECT: JSON.stringify(packageObject),
    IE_DETECTION_SCRIPT: transpile(grunt.file.read('../chipper/js/ie-detection.js'), true)
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,