"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
// Copyright 2021, University of Colorado Boulder

/**
 * Generally a "one-stop shop" for all things needed to update the PhET Codebase. This will:
 * - clone missing repos
 * - pull all repos
 * - set up tracking to the remote (only if needed)
 * - npm update in chipper/perennial/perennial-alias
 * - transpile (see --transpile)
 * - Conduct pull and tracking on all branches associated with the repo (see --allBranches) (useful for doing batch MRs)
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

var cloneMissingRepos = require('../common/cloneMissingRepos');
var execute = require('../common/execute');
var getActiveRepos = require('../common/getActiveRepos');
var getBranches = require('../common/getBranches');
var gitCheckout = require('../common/gitCheckout');
var gitIsClean = require('../common/gitIsClean');
var gitPullRebase = require('../common/gitPullRebase');
var gitRevParse = require('../common/gitRevParse');
var npmUpdate = require('../common/npmUpdate');
var outputJSAll = require('../common/outputJSAll');
var winston = require('../../../../../../perennial-alias/node_modules/winston');
var _ = require('lodash');
winston["default"].transports.console.level = 'error';

// If this is provided, we'll track ALL remote branches, check them out, and pull them (with rebase)
var allBranches = process.argv.includes('--allBranches');

// Additionally run the transpiler after pulling
var transpile = process.argv.includes('--transpile');

// Log all repos, even if nothing changed with them.
var allRepos = process.argv.includes('--all');

// ANSI escape sequences to move to the right (in the same line) or to apply or reset colors
var moveRight = " \x1B[42G";
var red = "\x1B[31m";
var green = "\x1B[32m";
var reset = "\x1B[0m";
var repos = getActiveRepos();
var data = {};
var getStatus = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(repo) {
    var branches, _iterator, _step, _branch, symbolicRef, branch, sha, status, track, isGreen;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          data[repo] = '';
          _context.prev = 1;
          _context.next = 4;
          return gitIsClean(repo);
        case 4:
          if (!_context.sent) {
            _context.next = 53;
            break;
          }
          if (!allBranches) {
            _context.next = 47;
            break;
          }
          _context.next = 8;
          return getBranches(repo);
        case 8:
          branches = _context.sent;
          _iterator = _createForOfIteratorHelper(branches);
          _context.prev = 10;
          _iterator.s();
        case 12:
          if ((_step = _iterator.n()).done) {
            _context.next = 35;
            break;
          }
          _branch = _step.value;
          _context.next = 16;
          return execute('git', ['rev-parse', '--verify', _branch], "../".concat(repo), {
            errors: 'resolve'
          });
        case 16:
          _context.t0 = _context.sent.code;
          if (!(_context.t0 !== 0)) {
            _context.next = 20;
            break;
          }
          _context.next = 20;
          return execute('git', ['branch', '--track', _branch, "origin/".concat(_branch)], "../".concat(repo));
        case 20:
          _context.next = 22;
          return gitCheckout(repo, _branch);
        case 22:
          _context.prev = 22;
          _context.next = 25;
          return gitPullRebase(repo);
        case 25:
          _context.next = 33;
          break;
        case 27:
          _context.prev = 27;
          _context.t1 = _context["catch"](22);
          _context.next = 31;
          return execute('git', ['branch', "--set-upstream-to=origin/".concat(_branch), _branch], "../".concat(repo));
        case 31:
          _context.next = 33;
          return gitPullRebase(repo);
        case 33:
          _context.next = 12;
          break;
        case 35:
          _context.next = 40;
          break;
        case 37:
          _context.prev = 37;
          _context.t2 = _context["catch"](10);
          _iterator.e(_context.t2);
        case 40:
          _context.prev = 40;
          _iterator.f();
          return _context.finish(40);
        case 43:
          _context.next = 45;
          return gitCheckout(repo, 'main');
        case 45:
          _context.next = 51;
          break;
        case 47:
          _context.next = 49;
          return gitCheckout(repo, 'main');
        case 49:
          _context.next = 51;
          return gitPullRebase(repo);
        case 51:
          _context.next = 54;
          break;
        case 53:
          if (repo === 'perennial') {
            console.log("".concat(red, "perennial is not clean, skipping pull").concat(reset));
          }
        case 54:
          if (!(repo === 'perennial')) {
            _context.next = 57;
            break;
          }
          _context.next = 57;
          return cloneMissingRepos();
        case 57:
          _context.next = 59;
          return execute('git', ['symbolic-ref', '-q', 'HEAD'], "../".concat(repo));
        case 59:
          symbolicRef = _context.sent.trim();
          branch = symbolicRef.replace('refs/heads/', ''); // might be empty string
          _context.next = 63;
          return gitRevParse(repo, 'HEAD');
        case 63:
          sha = _context.sent;
          _context.next = 66;
          return execute('git', ['status', '--porcelain'], "../".concat(repo));
        case 66:
          status = _context.sent;
          if (!branch) {
            _context.next = 73;
            break;
          }
          _context.next = 70;
          return execute('git', ['for-each-ref', '--format=%(push:track,nobracket)', symbolicRef], "../".concat(repo));
        case 70:
          _context.t3 = _context.sent.trim();
          _context.next = 74;
          break;
        case 73:
          _context.t3 = '';
        case 74:
          track = _context.t3;
          isGreen = false;
          if (branch) {
            isGreen = !status && branch === 'main' && !track.length;
            if (!isGreen || allRepos) {
              data[repo] += "".concat(repo).concat(moveRight).concat(isGreen ? green : red).concat(branch).concat(reset, " ").concat(track, "\n");
            }
          } else {
            // if no branch, print our SHA (detached head)
            data[repo] += "".concat(repo).concat(moveRight).concat(red).concat(sha).concat(reset, "\n");
          }
          if (status) {
            if (!isGreen || allRepos) {
              data[repo] += status + '\n';
            }
          }
          _context.next = 83;
          break;
        case 80:
          _context.prev = 80;
          _context.t4 = _context["catch"](1);
          data[repo] += "".concat(repo, " ERROR: ").concat(_context.t4);
        case 83:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[1, 80], [10, 37, 40, 43], [22, 27]]);
  }));
  return function getStatus(_x) {
    return _ref.apply(this, arguments);
  };
}();
_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
  return _regeneratorRuntime().wrap(function _callee2$(_context2) {
    while (1) switch (_context2.prev = _context2.next) {
      case 0:
        _context2.next = 2;
        return Promise.all(repos.map(function (repo) {
          return getStatus(repo);
        }));
      case 2:
        repos.forEach(function (repo) {
          process.stdout.write(data[repo]);
        });
        console.log("".concat(_.every(repos, function (repo) {
          return !data[repo].length;
        }) ? green : red, "-----=====] finished pulls [=====-----").concat(reset, "\n"));
        _context2.next = 6;
        return npmUpdate('chipper');
      case 6:
        _context2.next = 8;
        return npmUpdate('perennial');
      case 8:
        _context2.next = 10;
        return npmUpdate('perennial-alias');
      case 10:
        console.log("".concat(_.every(repos, function (repo) {
          return !data[repo].length;
        }) ? green : red, "-----=====] finished npm [=====-----").concat(reset, "\n"));
        if (!transpile) {
          _context2.next = 15;
          break;
        }
        _context2.next = 14;
        return outputJSAll();
      case 14:
        console.log("".concat(_.every(repos, function (repo) {
          return !data[repo].length;
        }) ? green : red, "-----=====] finished transpile [=====-----").concat(reset, "\n"));
      case 15:
      case "end":
        return _context2.stop();
    }
  }, _callee2);
}))();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,